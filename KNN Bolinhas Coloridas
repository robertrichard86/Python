import numpy as np
import cv2
from sklearn.neighbors import KNeighborsClassifier
from collections import Counter
import random
import matplotlib.pyplot as plt

# 1. DADOS DE TREINAMENTO COM MAIS AMOSTRAS
conhecidas = [
    # Amostras Azuis (variando tons)
    [0, 153, 251, 0], [10, 140, 240, 0], [20, 160, 245, 0],
    
    # Amostras Laranjas (variando tons)
    [255, 126, 84, 1], [245, 120, 80, 1], [250, 130, 90, 1],
    
    # Amostras Vermelhas (variando tons)
    [254, 61, 60, 2], [240, 50, 50, 2], [245, 70, 65, 2],
    
    # Amostras Verdes (variando tons)
    [0, 202, 38, 3], [10, 190, 45, 3], [5, 210, 30, 3],
    
    # Amostras Amarelas (variando tons)
    [254, 255, 0, 4], [240, 245, 10, 4], [250, 250, 5, 4],
    
    # Amostras Brancas (variando tons)
    [243, 251, 245, 5], [240, 248, 242, 5], [245, 250, 247, 5]
]

# 2. GERAR MAIS AMOSTRAS ALEATÓRIAS (50 amostras)
aleatorias = []
for _ in range(50):
    base = random.choice(conhecidas)
    nova_amostra = [
        max(0, min(255, base[0] + random.randint(-25, 25))),
        max(0, min(255, base[1] + random.randint(-25, 25))),
        max(0, min(255, base[2] + random.randint(-25, 25))),
        base[3]
    ]
    aleatorias.append(nova_amostra)

X = np.array([amostra[:3] for amostra in conhecidas + aleatorias])
y = np.array([amostra[3] for amostra in conhecidas + aleatorias])

# 3. DICIONÁRIO DE CORES
cores = {
    0: "Azul",
    1: "Laranja",
    2: "Vermelho",
    3: "Verde",
    4: "Amarelo",
    5: "Branco"
}

# 4. TREINAR O KNN COM MAIS VIZINHOS PARA MAIOR PRECISÃO
knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')
knn.fit(X, y)

def processar_imagem(imagem_path):
    img = cv2.imread(imagem_path)
    if img is None:
        print("Erro: Imagem não carregada. Verifique o caminho ou o nome do arquivo!")
        return

    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img_blur = cv2.medianBlur(img_rgb, 7)
    gray = cv2.cvtColor(img_blur, cv2.COLOR_RGB2GRAY)

    # Detectar círculos
    circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, dp=1.2, minDist=40,
                             param1=60, param2=35, minRadius=20, maxRadius=120)

    if circles is None:
        print("Nenhuma bolinha detectada! Ajuste os parâmetros.")
        return

    circles = np.uint16(np.around(circles))
    contagem = Counter()
    img_resultado = img_rgb.copy()

    for (x, y, r) in circles[0]:
        try:
            x, y, r = int(x), int(y), int(r)
            r = max(15, min(r, 100))
            
            height, width = img.shape[:2]
            y_min = max(0, y - r)
            y_max = min(height, y + r)
            x_min = max(0, x - r)
            x_max = min(width, x + r)

            if (y_max - y_min) <= 5 or (x_max - x_min) <= 5:
                continue

            roi = img_blur[y_min:y_max, x_min:x_max]
            if roi.size == 0:
                continue

            centro = roi[roi.shape[0]//2-2:roi.shape[0]//2+3, 
                     roi.shape[1]//2-2:roi.shape[1]//2+3]
            cor_media = np.mean(centro, axis=(0, 1)).astype(int)
            
            cor_predita = knn.predict([cor_media])[0]
            nome_cor = cores[cor_predita]
            contagem[nome_cor] += 1

            # Desenhar texto com fundo branco (mantido igual)
            text_size = cv2.getTextSize(nome_cor, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 1)[0]
            text_x = x - text_size[0] // 2
            text_y = y + text_size[1] // 2
            
            cv2.rectangle(img_resultado, 
                         (text_x - 3, text_y - text_size[1] - 3),
                         (text_x + text_size[0] + 3, text_y + 3),
                         (255, 255, 255), -1)
            
            cv2.putText(img_resultado, nome_cor, (text_x, text_y),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1)
            
        except Exception as e:
            continue

    # Mostrar imagem resultante (mantido igual)
    plt.figure(figsize=(14, 10))
    plt.imshow(img_resultado)
    plt.axis('off')
    plt.title('Resultado Final - Classificação de Cores', pad=20)
    plt.show()

    # RESUMO SIMPLIFICADO NO CONSOLE (como você quer)
    print("\n=== CONTAGEM DAS CORES ===")
    print(f"{'COR':<10} | {'QUANTIDADE':>10}")
    print("-" * 23)
    for cor, qtd in sorted(contagem.items()):
        print(f"{cor:<10} | {qtd:>10}")
    print("-" * 23)
    print(f"{'TOTAL':<10} | {sum(contagem.values()):>10}")

# Executar
print("RESULTADO FINAL")
processar_imagem("bolinhas_coloridas.png")
